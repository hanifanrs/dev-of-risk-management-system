# Import Packages
library(RMySQL)
library(rstudioapi)

# Connect to the MySQL database rms_dbs
rms_dbs <- dbConnect(RMySQL::MySQL(), 
                     dbname = "rms_dbs", 
                     host = "localhost", 
                     port = 3306,
                     user = rstudioapi::askForPassword("Database user"),
                     password = rstudioapi::askForPassword("Database password"))

# Get table names
tables <- dbListTables

# Display structure of tables
str(tables)

# Import the all table from rms_dbs
aktien <- dbReadTable(rms_dbs, "aktien")
tagespreis <- dbReadTable(rms_dbs, "tagespreis")
snapshot <- dbReadTable(rms_dbs, "snapshot")
portfolio <- dbReadTable(rms_dbs, "portfolio")
fonds <- dbReadTable(rms_dbs, "fonds") 

# Converted to correct Datatype
tagespreis$Datum <- as.Date(tagespreis$Datum, "%Y-%m-%d")

# Import Data from Queries 
daimler <- dbGetQuery(rms_dbs, "SELECT * FROM rms_dbs.tagespreis WHERE Aktien_id 
                      = '1' AND Datum BETWEEN '2016-01-01' AND '2022-12-31';")
daimler

deutschebank <- dbGetQuery(rms_dbs, "SELECT * FROM rms_dbs.tagespreis WHERE Aktien_id 
                      = '2' AND Datum BETWEEN '2016-01-01' AND '2022-12-31';")
deutschebank

query1 <- "SELECT Schlusskurs FROM tagespreis where Aktien_id=1"
mercedesSchlusskurs <- dbGetQuery(rms_dbs, query1 )

query2 <- "SELECT Schlusskurs FROM tagespreis where Aktien_id=2"
deutscheSchlusskurs <- dbGetQuery(rms_dbs, query2)

query3 <- "SELECT Datum FROM tagespreis"
Datum <- dbGetQuery(rms_dbs, query3)


# Converted to correct Datatype
daimler$Datum <- as.Date(daimler$Datum, "%Y-%m-%d")
deutschebank$Datum <- as.Date(deutschebank$Datum, "%Y-%m-%d")

#dbk = Deutsche Bank AG
#mbg = Mercedes-Benz Group AG
library(dplyr)
library(DBI)
library(lubridate) 

# Check data type
str(daimler)
str(deutschebank)

# Drop unused columns (Erster,Hoch,Tief,Stuecke,Volumen)
daimler <- daimler[-c(1:2,4:6,8:9)]
deutschebank <- deutschebank[-c(1:2,4:6,8:9)]

# Filter to 2022 year only
daimler <- subset(daimler, year(daimler$Datum) == 2022)
deutschebank <- subset(deutschebank, year(deutschebank$Datum) == 2022)

# Sort descending
daimler <- daimler %>% arrange_all(desc)
deutschebank <- deutschebank %>% arrange_all(desc)

# Number of today's shares
daimler_anzahl_heute <- dbGetQuery(rms_dbs,"SELECT s.Anzahl FROM Portfolio p
INNER JOIN Snapshot s ON s.Snapshot_id = p.Snapshot_id
INNER JOIN Tagespreis t ON t.Aktien_id = s.Aktien_id AND t.Datum = p.Datum
WHERE t.Datum = '2022-12-30' AND p.Snapshot_id = 257 AND t.Aktien_id = 1;")
daimler_anzahl_heute <- as.matrix(daimler_anzahl_heute)

deutschebank_anzahl_heute <- dbGetQuery(rms_dbs,"SELECT s.Anzahl FROM Portfolio p
INNER JOIN Snapshot s ON s.Snapshot_id = p.Snapshot_id
INNER JOIN Tagespreis t ON t.Aktien_id = s.Aktien_id AND t.Datum = p.Datum
WHERE t.Datum = '2022-12-30' AND p.Snapshot_id = 257 AND t.Aktien_id = 2;")
deutschebank_anzahl_heute <-as.matrix(deutschebank_anzahl_heute)

# Calculate the Value at Risk

# Schritt 3: Tagesrendite berechnen
return1 <- log(( mercedesSchlusskurs -1/ mercedesSchlusskurs)/mercedesSchlusskurs)
names(return1) <- c("returnmercedes")

return2 <- log((deutscheSchlusskurs -1/ deutscheSchlusskurs)/deutscheSchlusskurs)
names(return2)<-c("deutscheSchlusskurs")

#Legen wir eine Zeitraum
Zeitraum = 257


# Schritt 3: Tagesrendite berechnen

return1 <- log(( mercedesSchlusskurs -1/ mercedesSchlusskurs)/mercedesSchlusskurs)
names(return1) <- c("returnmercedes")

return2 <- log((deutscheSchlusskurs -1/ deutscheSchlusskurs)/deutscheSchlusskurs)
names(return2)<-c("returndeutsche")


# Berechnen Sie den VaR mithilfe einer Simulation mercedes
varmercedes <-data.frame( quantile(apply(return1, 2, cumsum), .95) * sqrt(Zeitraum))
names(varmercedes)<-c("varmercedes")

# Berechnen Sie den VaR mithilfe einer Simulation deutschebank
vardeutsche <-data.frame( quantile(apply(return2, 2, cumsum), .95) * sqrt(Zeitraum))
names(vardeutsche)<-c("vardeutsche")
var_berechnen <- varmercedes+vardeutsche
var_berechnen <- sort(var_berechnen, decreasing = TRUE)


# Calculate the Value of Portfolio
wert_berechnen <- dbGetQuery(rms_dbs, 
                             "SELECT SUM(s.Anzahl * t.Schlusskurs) AS Wert
FROM Portfolio p
INNER JOIN Snapshot s ON s.Snapshot_id = p.Snapshot_id
INNER JOIN Tagespreis t ON t.Aktien_id = s.Aktien_id AND t.Datum = p.Datum
GROUP BY s.Snapshot_id;")
wert_berechnen <- as.numeric(wert_berechnen$Wert)

# Append the calculated VaR and Wert
Value_at_risk <- var_berechnen
Wert <- wert_berechnen


# Additional
portfolio <- portfolio %>% arrange_all(desc)
portfolio$Datum <- as.Date(portfolio$Datum, "%Y-%m-%d")

# Write table in SQL
dbSendQuery(rms_dbs, "DELETE FROM fonds;")

dbSendQuery(rms_dbs, "DELETE FROM portfolio;")
dbWriteTable(rms_dbs, "portfolio", portfolio, append=TRUE, row.names=FALSE)

dbWriteTable(rms_dbs, "fonds", fonds, append=TRUE, row.names=FALSE)


#Backtesting

# Number of one Year shares
daimler_anzahl_heute <- dbGetQuery(rms_dbs,"SELECT s.Anzahl FROM Portfolio p
INNER JOIN Snapshot s ON s.Snapshot_id = p.Snapshot_id
INNER JOIN Tagespreis t ON t.Aktien_id = s.Aktien_id AND t.Datum = p.Datum
WHERE t.Datum between '2022-01-01' AND '2023-01-01' AND p.Snapshot_id = 257 AND t.Aktien_id = 1;")
daimler_anzahl_heute <- as.matrix(daimler_anzahl_heute)

deutschebank_anzahl_heute <- dbGetQuery(rms_dbs,"SELECT s.Anzahl FROM Portfolio p
INNER JOIN Snapshot s ON s.Snapshot_id = p.Snapshot_id
INNER JOIN Tagespreis t ON t.Aktien_id = s.Aktien_id AND t.Datum = p.Datum
WHERE t.Datum between '2022-01-01'AND '2023-01-01'  AND p.Snapshot_id = 257 AND t.Aktien_id = 2;")
deutschebank_anzahl_heute <-as.matrix(deutschebank_anzahl_heute)

# Calculate the Value at Risk

# Schritt 3: Tagesrendite berechnen
return1 <- log(( mercedesSchlusskurs -1/ mercedesSchlusskurs)/mercedesSchlusskurs)
names(return1) <- c("returnmercedes")

return2 <- log((deutscheSchlusskurs -1/ deutscheSchlusskurs)/deutscheSchlusskurs)
names(return2)<-c("deutscheSchlusskurs")

#Legen wir eine Zeitraum
Zeitraum = 257

# Berechnen Sie den VaR mithilfe einer Simulation mercedes
varmercedes <-data.frame( quantile(apply(return1, 2, cumsum), .95) * sqrt(Zeitraum))
names(varmercedes)<-c("varmercedes")

# Berechnen Sie den VaR mithilfe einer Simulation deutschebank
vardeutsche <-data.frame( quantile(apply(return2, 2, cumsum), .95) * sqrt(Zeitraum))
names(vardeutsche)<-c("vardeutsche")
var_berechnen <- vardeutsche+varmercedes
var_berechnen <- sort(var_berechnen, decreasing = TRUE)


# Calculate the Value at Risk

# daimler_var <- t((daimler_anzahl_heute %*% daimler$Schlusskurs)/daimler$Schlusskurs)
# daimler_var[1,] <- 0
# deutschebank_var <- t((deutschebank_anzahl_heute %*% deutschebank$Schlusskurs)/deutschebank$Schlusskurs)
# deutschebank_var[1,] <- 0
# var_berechnen <- daimler_var+deutschebank_var
# var_berechnen <- sort(var_berechnen, decreasing = TRUE)

# Calculate the Value of Portfolio
wert_berechnen <- dbGetQuery(rms_dbs, 
                             "SELECT SUM(s.Anzahl * t.Schlusskurs) AS Wert
FROM Portfolio p
INNER JOIN Snapshot s ON s.Snapshot_id = p.Snapshot_id
INNER JOIN Tagespreis t ON t.Aktien_id = s.Aktien_id AND t.Datum = p.Datum
GROUP BY s.Snapshot_id;")
wert_berechnen <- as.numeric(wert_berechnen$Wert)

# Append the calculated VaR and Wert
Value_at_risk <- var_berechnen
Wert <- wert_berechnen


# Additional
portfolio <- portfolio %>% arrange_all(desc)
portfolio$Datum <- as.Date(portfolio$Datum, "%Y-%m-%d")

# Write table in SQL
dbSendQuery(rms_dbs, "DELETE FROM fonds;")

dbSendQuery(rms_dbs, "DELETE FROM portfolio;")
dbWriteTable(rms_dbs, "portfolio", portfolio, append=TRUE, row.names=FALSE)

dbWriteTable(rms_dbs, "fonds", fonds, append=TRUE, row.names=FALSE)

#ploten

Wert<-log((wert_berechnen-1/wert_berechnen)/wert_berechnen)

ggplot(portfolio, aes(Datum)) +                    # basic graphical object
  geom_line(aes(y=Value_at_risk  ), colour="red") +  # first layer
  geom_line(aes(y= Wert  ), colour="green")  # second layer

